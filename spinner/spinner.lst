ca65 V2.19 - Git 700c01fa8
Main file   : spinner.s
Current file: spinner.s

000000r 1               .setcpu "6502"
000000r 1               .segment "CODE"
000000r 1               
000000r 1               VIA_SAD	    := $1740		        ; A side Data
000000r 1               VIA_PADD	:= $1741		        ; A side Data Direction
000000r 1               VIA_SBD	    := $1742		        ; B side Data
000000r 1               VIA_PBDD	:= $1743		        ; B side Data Direction
000000r 1               
000000r 1               .org	$0200		                ; Where program will be loaded
000200  1               
000200  1               
000200  1               START:                              ; No Operation, this does nothing
000200  1               
000200  1               INIT_VIA:
000200  1  A9 7F                        LDA #$7F	        ; Set PA0..PA6 as output, (PA7 as input)
000202  1  8D 41 17                     STA VIA_PADD
000205  1  A9 1E                        LDA #$1E            ; Set PB0..PB4 as output, (PB5..PB7 as input)
000207  1  8D 43 17                     STA VIA_PBDD
00020A  1               
00020A  1               SPIN:
00020A  1  A0 00                        LDY #$00            ; Start with listentry index=0 (first value)
00020C  1               NEXTSEG:
00020C  1  B9 23 02                     LDA LEDLIST,Y       ; load value at address LEDLIST + the value in Y-register into Accumulator-register
00020F  1  8D 42 17                     STA VIA_SBD         ; Store it into Port B (to select LED)
000212  1  B9 33 02                     LDA SEGLIST,Y       ; load value at address SEGLIST + the value in Y-register into Accumulator-register
000215  1  8D 40 17                     STA VIA_SAD         ; Store it into Port A (to select Segement)
000218  1  20 43 02                     JSR DELAY           ; Wait a little bit
00021B  1               
00021B  1  C8                           INY                 ; Increase Y (Y=Y+1)
00021C  1  C0 10                        CPY #16             ; Compare result of last instruction with 16 (6+6+2+2 segments)
00021E  1  90 EC                        BCC NEXTSEG         ; Jump to NEXTSEG if Y<16
000220  1               
000220  1  4C 0A 02                     JMP SPIN            ; Else restart SPIN Sequence
000223  1               
000223  1               LEDLIST:
000223  1  08 0A 0C 0E  	.byte	$08,$0A,$0C,$0E,$10,$12,$12,$12,$12,$10,$0E,$0C,$0A,$08,$08,$08
000227  1  10 12 12 12  
00022B  1  12 10 0E 0C  
000233  1               SEGLIST:
000233  1  01 01 01 01  	.byte	$01,$01,$01,$01,$01,$01,$02,$04,$08,$08,$08,$08,$08,$08,$10,$20
000237  1  01 01 02 04  
00023B  1  08 08 08 08  
000243  1               
000243  1               
000243  1               DELAY:                              ; A simple delay routine
000243  1                                                   ; First save current A,X,Y onto Stack
000243  1  48                           PHA                 ; Push A to the stack
000244  1  98                           TYA                 ; Store Y into A (A=Y)
000245  1  48                           PHA                 ; Push A to the stack, which is the value of Y
000246  1  8A                           TXA                 ; Store X into A (X=A)
000247  1  48                           PHA                 ; Push A to the stack, which is the value of X
000248  1               
000248  1  A0 46                        LDY #70		        ; Set register Y to 70
00024A  1  A2 FF        	            LDX #255            ; Set register X to 255
00024C  1               DELAYLOOP:
00024C  1  EA                           NOP                 ; Do nothing
00024D  1  EA                           NOP                 ; Do nothing again
00024E  1  CA                           DEX                 ; Decrement X
00024F  1  D0 FB        	            BNE DELAYLOOP       ; Jump to DELAYLOOP if X!=0
000251  1  88           	            DEY                 ; Decrement Y
000252  1  D0 F8        	            BNE DELAYLOOP       ; Jump to DELAYLOOP if Y!=0
000254  1               
000254  1                                                   ; Restore A,X,Y from stack in reverse order
000254  1  68           	            PLA                 ; Pop stack into A
000255  1  AA           	            TAX                 ; Store A into X (X=A)
000256  1  68           	            PLA                 ; Pop stack into A
000257  1  A8           	            TAY                 ; Store A into Y (Y=A)
000258  1  68           	            PLA                 ; Pop stack into A
000259  1  60           	            RTS                 ; Return, and continue with next instruction after the JSR that got us here!
000259  1               
