ca65 V2.19 - Git 700c01fa8
Main file   : framebuffer.s
Current file: framebuffer.s

000000r 1               .setcpu "6502"
000000r 1               .segment "CODE"
000000r 1               
000000r 1               .org	$0200		                ; Where program will be loaded
000200  1               
000200  1               
000200  1               VIA_SAD	    := $1740		        ; A side Data
000200  1               VIA_PADD	:= $1741		        ; A side Data Direction
000200  1               VIA_SBD	    := $1742		        ; B side Data
000200  1               VIA_PBDD	:= $1743		        ; B side Data Direction
000200  1               
000200  1               ;ANIM_STEP_DATA_PTR	:= $FB              ; Pointer to current Warp Step Buffer
000200  1               WARP_STEP	    := $40	            ; Zero page variable to hold current warp step
000200  1                                                   ; rom uses ZP 0xEF-0xFF
000200  1               
000200  1               
000200  1               START:                              ; No Operation, this does nothing
000200  1               
000200  1               INIT:
000200  1  D8                           CLD
000201  1               
000201  1               WARP:                               ; Do "Warp" animation
000201  1  A9 00                        LDA #$0
000203  1               
000203  1               NEXT_WARP_STEP:
000203  1  85 40                        STA WARP_STEP       ; Store 0 to current warp step
000205  1  0A                           ASL                 ; Multiply by 8 by doing Shift left 3 times
000206  1  0A                           ASL
000207  1  0A                           ASL
000208  1  18                           CLC
000209  1  AA                           TAX                 ; Z is now index to animation data
00020A  1               
00020A  1  A0 00                        LDY #$0
00020C  1               COPY_FB_STEP:
00020C  1  BD 85 02                     LDA ANIM_STEP,X
00020F  1  99 79 02                     STA FB,Y
000212  1  C8                           INY
000213  1  E8                           INX
000214  1  C0 06                        CPY #6              ; Compare result of last instruction with 6 (6 segments)
000216  1  90 F4                        BCC COPY_FB_STEP    ; Jump to NEXTSEG if Y<6
000218  1               
000218  1  A2 8F                        LDX #$8F            ; Delay loop before next animation step
00021A  1  20 2B 02     @1:             JSR LED_REFRESH
00021D  1  CA                           DEX
00021E  1  D0 FA                        BNE @1
000220  1               
000220  1  E6 40                        INC WARP_STEP
000222  1  A5 40                        LDA WARP_STEP
000224  1  C9 07                        CMP #$7             ; We have 7 warp steps
000226  1  D0 DB                        BNE NEXT_WARP_STEP
000228  1               
000228  1  4C 01 02                     JMP WARP            ; Repeat animation
00022B  1               
00022B  1               
00022B  1               
00022B  1               ;
00022B  1               ;   Refresh the LED segments from the Framebuffer FB
00022B  1               ;   Destroys nothing
00022B  1               ;
00022B  1               LED_REFRESH:
00022B  1                                                   ; First save current A,X,Y onto Stack
00022B  1  48                           PHA                 ; Push A to the stack
00022C  1  98                           TYA                 ; Store Y into A (A=Y)
00022D  1  48                           PHA                 ; Push A to the stack, which is the value of Y
00022E  1  8A                           TXA                 ; Store X into A (X=A)
00022F  1  48                           PHA                 ; Push A to the stack, which is the value of X
000230  1               
000230  1               VIA_LCD_OUT:                        ; Set port A to output Mode (for LED)
000230  1  A9 7F                        LDA #$7F	        ; Set PA0..PA6 as output, (PA7 as input)
000232  1  8D 41 17                     STA VIA_PADD
000235  1  A9 1E                        LDA #$1E            ; Set PB0..PB4 as output, (PB5..PB7 as input)
000237  1  8D 43 17                     STA VIA_PBDD
00023A  1               
00023A  1  A0 00                        LDY #$00            ; Start with listentry index=0 (first value)
00023C  1               NEXTSEG:
00023C  1  A9 00                        LDA #$00            ; Disable output
00023E  1  8D 40 17                     STA VIA_SAD         ; Store it into Port A (to select Segement)
000241  1               
000241  1  B9 7F 02                     LDA LEDSEL,Y        ; load led-selector value at address LEDSEL + the value in Y-register into Accumulator-register
000244  1  8D 42 17                     STA VIA_SBD         ; Store it into Port B (to select LED)
000247  1  B9 79 02                     LDA FB,Y            ; load the frambuffer value at address FB + the value in Y-register into Accumulator-register
00024A  1  8D 40 17                     STA VIA_SAD         ; Store it into Port A (to select Segement)
00024D  1               
00024D  1  A2 0F                        LDX #$F             ; A short Delay to let fully load the LED
00024F  1  CA           @delay:         DEX
000250  1  D0 FD                        BNE @delay
000252  1               
000252  1  C8                           INY                 ; Increase Y (Y=Y+1)
000253  1  C0 06                        CPY #6              ; Compare result of last instruction with 6 (6 segments)
000255  1  90 E5                        BCC NEXTSEG         ; Jump to NEXTSEG if Y<6
000257  1                               ;RTS
000257  1               
000257  1               VIA_KEYB_IN:                        ; Restore port A to input Mode (for keyboard)
000257  1  A9 00                        LDA #$00
000259  1  8D 42 17                     STA VIA_SBD         ; No LED Selected
00025C  1               
00025C  1  A9 00                        LDA #$00	        ; Set PA0..PA7 as input
00025E  1  8D 41 17                     STA VIA_PADD
000261  1  A9 1E                        LDA #$1E            ; Set PB0..PB4 as output, (PB5..PB7 as input)
000263  1  8D 43 17                     STA VIA_PBDD
000266  1               
000266  1                                                   ; Restore A,X,Y from stack in reverse order
000266  1  68           	            PLA                 ; Pop stack into A
000267  1  AA           	            TAX                 ; Store A into X (X=A)
000268  1  68           	            PLA                 ; Pop stack into A
000269  1  A8           	            TAY                 ; Store A into Y (Y=A)
00026A  1  68           	            PLA                 ; Pop stack into A
00026B  1  60           	            RTS                 ; Return, and continue with next instruction after the JSR that got us here!
00026C  1               
00026C  1               ;
00026C  1               ;  Clears the Framebuffer
00026C  1               ;  Destroys A & Y
00026C  1               ;
00026C  1               FB_CLEAR:
00026C  1  A0 00                        LDY #$00            ; Start with pos 0
00026E  1               @next_pos:
00026E  1  A9 00                        LDA #$00            ; Clear all segments at curret pos
000270  1  99 79 02                     STA FB,Y            ; in FB with index Y
000273  1               
000273  1  C8                           INY                 ; Increase Y (Y=Y+1)
000274  1  C0 06                        CPY #6              ; Compare result of last instruction with 6 (6 segments)
000276  1  90 F6                        BCC @next_pos       ; Jump to clear next pos if Y<6
000278  1  60                           RTS
000279  1               
000279  1               FB:
000279  1  00 00 00 00  	.byte	$00,$00,$00,$00,$00,$00
00027D  1  00 00        
00027F  1               LEDSEL:
00027F  1  08 0A 0C 0E  	.byte	$08,$0A,$0C,$0E,$10,$12
000283  1  10 12        
000285  1               
000285  1               ANIM_STEP:
000285  1  00 00 00 00  	.byte	$00,$00,$00,$00,$00,$00,$00,$00
000289  1  00 00 00 00  
00028D  1  00 00 06 30  	.byte	$00,$00,$06,$30,$00,$00,$00,$00
000291  1  00 00 00 00  
000295  1  00 00 36 36  	.byte	$00,$00,$36,$36,$00,$00,$00,$00
000299  1  00 00 00 00  
00029D  1  00 06 36 36  	.byte	$00,$06,$36,$36,$30,$00,$00,$00
0002A1  1  30 00 00 00  
0002A5  1  00 36 36 36  	.byte	$00,$36,$36,$36,$36,$00,$00,$00
0002A9  1  36 00 00 00  
0002AD  1  06 36 36 36  	.byte	$06,$36,$36,$36,$36,$30,$00,$00
0002B1  1  36 30 00 00  
0002B5  1  36 36 36 36  	.byte	$36,$36,$36,$36,$36,$36,$00,$00
0002B9  1  36 36 00 00  
0002BD  1               
0002BD  1               
